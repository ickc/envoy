[build-system]
requires = ["setuptools", "poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "bsos"
version = "0.1.0"
description = "bsosâ€”bootstraping OS environments"
license = "BSD-3-Clause"
keywords = [
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "License :: OSI Approved :: BSD License",
    "Operating System :: Unix",
    "Operating System :: POSIX",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Utilities",
]
homepage = "https://github.com/ickc/bsos"
repository = "https://github.com/ickc/bsos"
documentation = "https://ickc.github.io/bsos"
authors = ["Kolen Cheung <christian.kolen@gmail.com>"]
readme = "README.md"
packages = [
    { include = "bsos", from = "src" },
]
include = [
    'LICENSE',
    'README.md',
]

[tool.poetry.dependencies]
python = ">=3.8"
defopt = "^6"
httpx = "*"
pandas = "*"
platformdirs = "*"
pyyaml = "*"
yamlloader = "*"

# extras
coloredlogs = { optional = true, version = ">=14,<16" }

[tool.poetry.extras]
extras = [
    "coloredlogs",
]

[tool.poetry.scripts]
conda_web_api = 'bsos.conda_web_api:cli'

[tool.coverage.paths]
source = [
    'src',
    '*/site-packages',
]

[tool.coverage.run]
branch = true
# concurrency = ["thread", "multiprocessing"]
source = [
    'src',
    'tests',
]
parallel = true
relative_files = true

[tool.coverage.report]
show_missing = true
precision = 2

[tool.pytest.ini_options]

addopts = [
    '-ra',
    '--strict-markers',
    '--tb=auto',
]

testpaths = [
    'tests',
]

[tool.isort]
line_length = 120
known_first_party = 'bsos'
default_section = 'THIRDPARTY'
forced_separate = 'tests'
profile = 'black'
skip = [
    '.eggs',
    'ci/templates',
    'build',
    'dist',
]

[tool.pylint.messages_control]
disable = "C0330, C0326"

[tool.pylint.format]
max-line-length = 120

[tool.black]
line-length = 120
target-version = ['py38']

[tool.jupytext]
formats = "ipynb,py:percent"

[tool.pixi.project]
name = "bsos"
channels = ["conda-forge"]
platforms = ["linux-64", "linux-aarch64", "linux-ppc64le", "osx-64", "osx-arm64"]

[tool.pixi.dependencies]
defopt = ">=6.4.0,<7"
httpx = ">=0.28.1,<0.29"
pandas = ">=2.2.3,<3"
platformdirs = ">=4.3.7,<5"
pyyaml = ">=6.0.2,<7"
yamlloader = ">=1.5.1,<2"

[tool.pixi.pypi-dependencies]
bsos = { path = ".", editable = true}

[tool.pixi.tasks]
# generate
generate = { depends-on = [{ task = "generate-conda" }, { task = "generate-jupyterlab" }, { task = "generate-system" }], description = "Generate conda environment files." }
generate-conda = { cmd = "python -m bsos.conda_web_api generate conda/conda.csv", description = "Generate conda/conda.csv" }
generate-jupyterlab = { cmd = "python -m bsos.conda_web_api generate conda/jupyterlab.csv -v 3.13 --name-format jupyterlab", description = "Generate conda/jupyterlab.csv" }
generate-system = { cmd = "python -m bsos.conda_web_api generate conda/system.csv -v 3.13 --name-format system --no-python", description = "Generate conda/system.csv" }

# clean
clean = { cmd = "python -m bsos.conda_web_api clean", description = "Remove the bsos cache when using conda_web_api." }
update = { depends-on = [{ task = "clean"}, { task = "generate" }], description = "Update conda environment files by cleaning the cache and regenerating them." }

# misc
list-depended = { cmd = "tail -n +2 conda/conda.csv | cut -d, -f6 | tr '/' '\n' | sort -u", description = "List all depended packages in conda/conda.csv" }
